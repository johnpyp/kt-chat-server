/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package kt.chat.server

import io.github.oshai.KotlinLogging
import io.ktor.server.application.Application
import io.ktor.server.application.call
import io.ktor.server.application.install
import io.ktor.server.engine.embeddedServer
import io.ktor.server.netty.Netty
import io.ktor.server.response.respondText
import io.ktor.server.routing.get
import io.ktor.server.routing.routing
import io.ktor.server.websocket.WebSockets
import io.ktor.server.websocket.webSocket
import io.ktor.websocket.Frame
import io.ktor.websocket.readText
import kt.chat.server.connection.Connection
import kt.chat.server.connection.ConnectionManager

private val logger = KotlinLogging.logger {}

fun main() {
  println("Server is up !!!!")

  embeddedServer(Netty, port = 8080, module = Application::ktorAppModule).start(wait = true)
}

fun Application.ktorAppModule() {
  install(WebSockets)

  routing {
    get("/") { call.respondText("Hello, world!") }

    val connectionManager = ConnectionManager()

    webSocket("/chat") {
      val thisConn = Connection(connectionManager, this)

      connectionManager.addConnection(thisConn)
      try {
        for (frame in incoming) {
          frame as? Frame.Text ?: continue
          val receivedText = frame.readText()
          val chatEvent = ChatEventHandler.parseChatFrame(receivedText)
          if (chatEvent != null) {
            thisConn.processEvent(chatEvent)
          } else {
            thisConn.sendEvent(ChatBadRequestEvent("Invalid frame"))
          }
        }
      } catch (e: Exception) {
        println(e.localizedMessage)
      } finally {
        connectionManager.disconnect(thisConn)
      }
    }
  }
}
